"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));

var _test = _interopRequireDefault(require("./presets/test.json"));

var _kovan = _interopRequireDefault(require("./presets/kovan.json"));

var _http = _interopRequireDefault(require("./presets/http.json"));

var _ws = _interopRequireDefault(require("./presets/ws.json"));

var _mainnet = _interopRequireDefault(require("./presets/mainnet.json"));

var _browser = _interopRequireDefault(require("./presets/browser.json"));

var _inject = _interopRequireDefault(require("./presets/inject.json"));

var _intersection = _interopRequireDefault(require("lodash/intersection"));

var _merge = _interopRequireDefault(require("lodash/merge"));

var _index = require("./index");

var _constants = require("../utils/constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var ConfigPresetNotFoundError = /*#__PURE__*/function (_Error) {
  (0, _inherits2["default"])(ConfigPresetNotFoundError, _Error);

  var _super = _createSuper(ConfigPresetNotFoundError);

  function ConfigPresetNotFoundError(message) {
    (0, _classCallCheck2["default"])(this, ConfigPresetNotFoundError);
    return _super.call(this, 'Cannot find configuration preset with name: ' + message);
  }

  return ConfigPresetNotFoundError;
}( /*#__PURE__*/(0, _wrapNativeSuper2["default"])(Error));

var serviceRoles = ['accounts', 'allowance', 'gas', 'multicall', 'nonce', 'proxy', 'smartContract', 'timer', 'token', 'transactionManager', 'web3'];

function loadPreset(name) {
  if ((0, _typeof2["default"])(name) == 'object') {
    return name; // for testing
  }

  var preset;

  switch (name) {
    case 'test':
      preset = _test["default"];
      break;

    case 'http':
      preset = _http["default"];
      break;

    case 'ws':
    case 'websocket':
      preset = _ws["default"];
      break;

    case 'kovan':
      preset = _kovan["default"];
      break;

    case 'mainnet':
      preset = _mainnet["default"];
      break;

    case 'browser':
      preset = _browser["default"];
      break;

    case 'inject':
      preset = _inject["default"];
      break;

    default:
      throw new ConfigPresetNotFoundError(name);
  } // make a copy so we don't overwrite the original values


  return (0, _merge["default"])({}, preset);
}

var reservedWords = ['accounts', 'overrideMetamask', 'plugins', 'privateKey', 'provider', 'url'];

function checkForReservedWords(words) {
  var usedReservedWords = (0, _intersection["default"])(words, reservedWords);

  if (usedReservedWords.length > 0) {
    throw new Error('The following words cannot be used as service role names: ' + usedReservedWords.join(', '));
  }
}

var ConfigFactory = /*#__PURE__*/function () {
  function ConfigFactory() {
    (0, _classCallCheck2["default"])(this, ConfigFactory);
  }

  (0, _createClass2["default"])(ConfigFactory, null, [{
    key: "create",

    /**
     * @param {string} preset
     * @param {object} options
     */
    value: function create(preset) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var resolver = arguments.length > 2 ? arguments[2] : undefined;

      if (typeof preset !== 'string') {
        options = preset;
        preset = options.preset;
      }

      var config = loadPreset(preset);
      var additionalServices = options.additionalServices || [];
      checkForReservedWords(additionalServices);

      var _iterator = _createForOfIteratorHelper(serviceRoles.concat(additionalServices)),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var role = _step.value;
          if (!(role in options)) continue;

          if (!(role in config)) {
            config[role] = options[role];
            continue;
          }

          config[role] = (0, _index.mergeServiceConfig)(role, config[role], options[role], resolver);
        } // web3-specific convenience options

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (config.web3) {
        var web3Settings = config.web3[1] || config.web3;
        if (!web3Settings.provider) web3Settings.provider = {};

        if (options.url) {
          web3Settings.provider.url = options.url;
        }

        if (options.provider) {
          (0, _merge["default"])(web3Settings.provider, options.provider);
        }
      } // accounts-specific convenience option


      if (options.privateKey) {
        config.accounts = _objectSpread(_objectSpread({}, config.accounts), {}, {
          "default": {
            type: _constants.AccountType.PRIVATE_KEY,
            key: options.privateKey
          }
        });
      }

      return config;
    }
  }]);
  return ConfigFactory;
}();

exports["default"] = ConfigFactory;