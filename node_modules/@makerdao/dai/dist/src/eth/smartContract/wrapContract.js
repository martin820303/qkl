"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapContract = wrapContract;

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function wrapContract(contract, name, abi, txManager) {
  var nonConstantFns = {};

  var _iterator = _createForOfIteratorHelper(abi),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _step.value,
          type = _step$value.type,
          constant = _step$value.constant,
          _name = _step$value.name,
          inputs = _step$value.inputs;

      if (type === 'function' && constant === false) {
        // Map all of the contract method names + sigs in cases where the method
        // sig is used as the key due to method overloading, e.g.
        // contract["method(address,uint256)"](foo, bar)
        if (inputs.length > 0) {
          var methodSig = "".concat(_name, "(").concat(inputs.map(function (i) {
            return i.type;
          }).join(','), ")");
          nonConstantFns[methodSig] = true;
        } // Currently assume that the default method chosen by Ethers when there
        // are multiple overloaded methods of the same name is non-constant


        nonConstantFns[_name] = true;
      }
    } // Why is the first argument an almost-empty object? The functions in
    // ethers.Contract are set up as read-only, non-configurable properties, which
    // means if we try to change their values with Proxy, we get an error.
    //
    // But that only happens if the contract is specified as the first argument to
    // Proxy. So we don't do that. Go on, wag your finger.
    //
    // See https://stackoverflow.com/a/48495509/56817 for more explanation.

  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var proxy = new Proxy({
    // this is handy for testing, but probably shouldn't be used for anything
    // else
    wrappedContract: contract
  }, {
    get: function get(target, key) {
      if (key in target) return target[key];
      if (!txManager || !nonConstantFns[key]) return contract[key];
      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return txManager.sendContractCall(contract, key, args, name);
      };
    },
    set: function set(target, key, value) {
      contract[key] = value;
      return true;
    }
  });
  return proxy;
}