"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _utils = require("../utils");

var _TransactionLifeCycle2 = _interopRequireDefault(require("../eth/TransactionLifeCycle"));

var _debug = _interopRequireDefault(require("debug"));

var _Currency = require("./Currency");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var log = (0, _debug["default"])('dai:TransactionObject');

var TransactionObject = /*#__PURE__*/function (_TransactionLifeCycle) {
  (0, _inherits2["default"])(TransactionObject, _TransactionLifeCycle);

  var _super = _createSuper(TransactionObject);

  function TransactionObject(transaction, transactionManager) {
    var _this;

    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        businessObject = _ref.businessObject,
        metadata = _ref.metadata;

    (0, _classCallCheck2["default"])(this, TransactionObject);
    _this = _super.call(this, businessObject);
    _this._transaction = transaction;
    _this._web3Service = transactionManager.get('web3');
    _this._nonceService = transactionManager.get('nonce');
    _this._timeStampSubmitted = new Date();
    _this.metadata = metadata || {};
    _this._confirmedBlockCount = _this._web3Service.confirmedBlockCount();
    return _this;
  }

  (0, _createClass2["default"])(TransactionObject, [{
    key: "timeStampSubmitted",
    value: function timeStampSubmitted() {
      return this._timeStampSubmitted;
    }
  }, {
    key: "timeStamp",
    value: function timeStamp() {
      return this._timeStampMined;
    }
  }, {
    key: "fees",
    value: function fees() {
      return this._fees;
    }
  }, {
    key: "mine",
    value: function mine() {
      var _this2 = this;

      if (!this._dataPromise) this._dataPromise = this._getTransactionData();
      return this._dataPromise.then(function () {
        return _this2._returnValue();
      });
    }
  }, {
    key: "isFinalized",
    value: function isFinalized() {
      if (this._blockNumberWhenMined + this._confirmedBlockCount <= this._web3Service.blockNumber()) this.setFinalized();
      return (0, _get2["default"])((0, _getPrototypeOf2["default"])(TransactionObject.prototype), "isFinalized", this).call(this);
    }
  }, {
    key: "confirm",
    value: function () {
      var _confirm = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var count,
            newBlockNumber,
            newReceipt,
            _args = arguments;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                count = _args.length > 0 && _args[0] !== undefined ? _args[0] : this._confirmedBlockCount;
                this._confirmedBlockCount = count;
                _context.next = 4;
                return this.mine();

              case 4:
                if (!(parseInt(count) <= 0)) {
                  _context.next = 6;
                  break;
                }

                return _context.abrupt("return");

              case 6:
                newBlockNumber = this.receipt.blockNumber + count;
                _context.next = 9;
                return this._web3Service.waitForBlockNumber(newBlockNumber);

              case 9:
                _context.next = 11;
                return this._web3Service.getTransactionReceipt(this.hash);

              case 11:
                newReceipt = _context.sent;

                if (!(newReceipt.blockHash !== this.receipt.blockHash)) {
                  _context.next = 14;
                  break;
                }

                throw new Error('transaction block hash changed');

              case 14:
                this.setFinalized();
                return _context.abrupt("return", this._returnValue());

              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function confirm() {
        return _confirm.apply(this, arguments);
      }

      return confirm;
    }()
  }, {
    key: "_getTransactionData",
    value: function () {
      var _getTransactionData2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var gasPrice, tx, label, revertMsg;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return this._transaction;

              case 3:
                this.hash = _context2.sent;

                if (this.hash.hash) {
                  // When using websockets, the transaction hash is returned from this._transaction
                  // Otherwise, the tx receipt is returned. This corrects in such cases
                  this.hash = this.hash.hash;
                }

                this.setPending(); // set state to pending
                // when you're on a local testnet, the transaction will probably already
                // be mined by this point. but on other nets, you still have to wait for
                // it to be mined.

                if (!(!tx || !tx.blockHash)) {
                  _context2.next = 10;
                  break;
                }

                _context2.next = 9;
                return this._keepWaitingForTx();

              case 9:
                tx = _context2.sent;

              case 10:
                gasPrice = tx.gasPrice;
                this._timeStampMined = new Date();
                this._blockNumberWhenMined = tx.blockNumber;
                _context2.next = 15;
                return this._waitForReceipt();

              case 15:
                this.receipt = _context2.sent;

                if (!!this.receipt.gasUsed && !!gasPrice) {
                  this._fees = _Currency.ETH.wei(gasPrice).times(this.receipt.gasUsed);
                } else {
                  /*
                    console.warn('Unable to calculate transaction fee. Gas usage or price is unavailable. Usage = ',
                      receipt.gasUsed ? receipt.gasUsed.toString() : '<not set>',
                      'Price = ', gasPrice ? gasPrice.toString() : '<not set>'
                    );
                  */
                }

                if (!(this.receipt.status == '0x1' || this.receipt.status == 1)) {
                  _context2.next = 21;
                  break;
                }

                this.setMined();
                _context2.next = 25;
                break;

              case 21:
                label = this.metadata.contract ? "".concat(this.metadata.contract, ".").concat(this.metadata.method) : 'transaction';
                revertMsg = "".concat(label, " ").concat(this.hash, " reverted");
                log(revertMsg + '\n' + JSON.stringify(this.receipt, null, '  '));
                throw new Error(revertMsg);

              case 25:
                _context2.next = 33;
                break;

              case 27:
                _context2.prev = 27;
                _context2.t0 = _context2["catch"](0);
                _context2.next = 31;
                return this._nonceService.setCounts();

              case 31:
                this.setError(_context2.t0);
                throw _context2.t0;

              case 33:
                return _context2.abrupt("return", this);

              case 34:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 27]]);
      }));

      function _getTransactionData() {
        return _getTransactionData2.apply(this, arguments);
      }

      return _getTransactionData;
    }()
  }, {
    key: "_waitForReceipt",
    value: function _waitForReceipt() {
      var _this3 = this;

      var retries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;
      var currentTry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var result = Promise.resolve(this._web3Service.getTransactionReceipt(this.hash));
      if (retries < 1) return result;
      return result.then(function (receipt) {
        if (receipt) return receipt;
        log("Receipt is null. Retrying ".concat(retries, " more time(s)"));
        return (0, _utils.promiseWait)(currentTry * 1500).then(function () {
          return _this3._waitForReceipt(retries - 1, currentTry + 1);
        });
      });
    }
  }, {
    key: "_keepWaitingForTx",
    value: function () {
      var _keepWaitingForTx2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
        var tx, startTime, i, elapsed;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                startTime = new Date();
                log("waiting for transaction ".concat(this.hash.substring(8), "... to mine"));
                i = 0;

              case 3:
                if (!(i < 720)) {
                  _context3.next = 15;
                  break;
                }

                _context3.next = 6;
                return this._web3Service.getTransaction(this.hash);

              case 6:
                tx = _context3.sent;

                if (!(tx || {}).blockHash) {
                  _context3.next = 9;
                  break;
                }

                return _context3.abrupt("break", 15);

              case 9:
                log('not mined yet');
                _context3.next = 12;
                return (0, _utils.promiseWait)(5000);

              case 12:
                i++;
                _context3.next = 3;
                break;

              case 15:
                if (!(tx && !tx.blockHash)) {
                  _context3.next = 17;
                  break;
                }

                throw new Error('This transaction is taking longer than it should. Check its status on etherscan or try again. Tx hash:', this.hash);

              case 17:
                elapsed = (new Date() - startTime) / 1000;
                log("mined ".concat(this.hash.substring(8), "... done in ").concat(elapsed, "s"));
                return _context3.abrupt("return", tx);

              case 20:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _keepWaitingForTx() {
        return _keepWaitingForTx2.apply(this, arguments);
      }

      return _keepWaitingForTx;
    }()
  }]);
  return TransactionObject;
}(_TransactionLifeCycle2["default"]);

exports["default"] = TransactionObject;