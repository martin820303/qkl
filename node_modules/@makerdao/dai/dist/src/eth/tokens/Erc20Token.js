"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Currency = require("../Currency");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Erc20Token = /*#__PURE__*/function () {
  function Erc20Token(contract, web3Service) {
    var decimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 18;
    var symbol = arguments.length > 3 ? arguments[3] : undefined;
    var currency = arguments.length > 4 ? arguments[4] : undefined;
    (0, _classCallCheck2["default"])(this, Erc20Token);
    this._contract = contract;
    this._web3 = web3Service;
    this._decimals = decimals;
    this.symbol = symbol;
    this._currency = currency || _Currency.currencies[symbol];
  }

  (0, _createClass2["default"])(Erc20Token, [{
    key: "allowance",
    value: function () {
      var _allowance = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(tokenOwner, spender) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = this;
                _context.next = 3;
                return this._contract.allowance(tokenOwner, spender);

              case 3:
                _context.t1 = _context.sent;
                return _context.abrupt("return", _context.t0._valueFromContract.call(_context.t0, _context.t1));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function allowance(_x, _x2) {
        return _allowance.apply(this, arguments);
      }

      return allowance;
    }()
  }, {
    key: "balance",
    value: function () {
      var _balance = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.balanceOf(this._web3.currentAddress()));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function balance() {
        return _balance.apply(this, arguments);
      }

      return balance;
    }()
  }, {
    key: "balanceOf",
    value: function () {
      var _balanceOf = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(owner) {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.t0 = this;
                _context3.next = 3;
                return this._contract.balanceOf(owner);

              case 3:
                _context3.t1 = _context3.sent;
                return _context3.abrupt("return", _context3.t0._valueFromContract.call(_context3.t0, _context3.t1));

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function balanceOf(_x3) {
        return _balanceOf.apply(this, arguments);
      }

      return balanceOf;
    }()
  }, {
    key: "totalSupply",
    value: function () {
      var _totalSupply = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.t0 = this;
                _context4.next = 3;
                return this._contract.totalSupply();

              case 3:
                _context4.t1 = _context4.sent;
                return _context4.abrupt("return", _context4.t0._valueFromContract.call(_context4.t0, _context4.t1));

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function totalSupply() {
        return _totalSupply.apply(this, arguments);
      }

      return totalSupply;
    }()
  }, {
    key: "address",
    value: function address() {
      return this._contract.address;
    }
  }, {
    key: "_valueForContract",
    value: function _valueForContract(value) {
      var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._currency;
      return this._getCurrency(value, unit).toFixed(this._decimals);
    }
  }, {
    key: "_valueFromContract",
    value: function _valueFromContract(value) {
      return this._currency(value, -1 * this._decimals);
    }
  }, {
    key: "approve",
    value: function approve(spender, value) {
      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          _ref$unit = _ref.unit,
          unit = _ref$unit === void 0 ? this._currency : _ref$unit,
          options = (0, _objectWithoutProperties2["default"])(_ref, ["unit"]);

      return this._contract.approve(spender, this._valueForContract(value, unit), _objectSpread({
        metadata: {
          action: {
            name: 'approve',
            spender: spender,
            allowance: this._getCurrency(value, unit),
            allowing: value != '0'
          }
        }
      }, options));
    }
  }, {
    key: "approveUnlimited",
    value: function approveUnlimited(spender) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (!spender) spender = this._web3.currentAddress();
      return this._contract.approve(spender, -1, _objectSpread({
        metadata: {
          action: {
            name: 'approve',
            spender: spender,
            allowance: Number.MAX_SAFE_INTEGER,
            allowing: true,
            unlimited: true
          }
        }
      }, options));
    }
  }, {
    key: "transfer",
    value: function transfer(to, value) {
      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          _ref2$unit = _ref2.unit,
          unit = _ref2$unit === void 0 ? this._currency : _ref2$unit,
          promise = _ref2.promise;

      return this._contract.transfer(to, this._valueForContract(value, unit), {
        metadata: {
          action: {
            name: 'transfer',
            from: this._web3.currentAddress(),
            to: to,
            amount: this._getCurrency(value, unit)
          }
        },
        promise: promise
      });
    }
  }, {
    key: "transferFrom",
    value: function transferFrom(from, to, value) {
      var _ref3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
          _ref3$unit = _ref3.unit,
          unit = _ref3$unit === void 0 ? this._currency : _ref3$unit,
          promise = _ref3.promise;

      return this._contract.transferFrom(from, to, this._valueForContract(value, unit), {
        metadata: {
          action: {
            name: 'transfer',
            from: from,
            to: to,
            amount: (0, _Currency.getCurrency)(value, unit)
          }
        },
        promise: promise
      });
    }
  }, {
    key: "_getCurrency",
    value: function _getCurrency(amount, unit) {
      if (unit == this._currency) return this._currency(amount);
      return (0, _Currency.getCurrency)(amount, unit);
    }
  }]);
  return Erc20Token;
}();

exports["default"] = Erc20Token;