"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = makeSigner;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _utils = require("../../utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function makeSigner(web3Service) {
  var provider = web3Service.web3Provider();
  var call = (0, _utils.promisify)(web3Service._web3.eth.call);
  return {
    getAddress: function getAddress() {
      return web3Service.currentAddress();
    },
    estimateGas: function estimateGas(tx) {
      return web3Service.estimateGas(tx);
    },
    sendTransaction: function sendTransaction(tx) {
      return web3Service.sendTransaction(_objectSpread(_objectSpread({}, tx), {}, {
        from: web3Service.currentAddress()
      }));
    },
    provider: new Proxy(provider, {
      get: function get(target, key) {
        switch (key) {
          case 'resolveName':
            return function (address) {
              return address;
            };

          case 'call':
            return call;

          default:
            return target[key];
        }
      }
    })
  };
}