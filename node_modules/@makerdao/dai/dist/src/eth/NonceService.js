"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _servicesCore = require("@makerdao/services-core");

var _utils = require("../utils");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var NonceService = /*#__PURE__*/function (_PublicService) {
  (0, _inherits2["default"])(NonceService, _PublicService);

  var _super = _createSuper(NonceService);

  function NonceService() {
    var _this;

    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'nonce';
    (0, _classCallCheck2["default"])(this, NonceService);
    _this = _super.call(this, name, ['web3', 'accounts']);
    _this._counts = {};
    return _this;
  }

  (0, _createClass2["default"])(NonceService, [{
    key: "connect",
    value: function () {
      var _connect = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this._accountsService = this.get('accounts');
                this._web3Service = this.get('web3');
                _context.next = 4;
                return this.setCounts();

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function connect() {
        return _connect.apply(this, arguments);
      }

      return connect;
    }()
  }, {
    key: "_getTxCount",
    value: function () {
      var _getTxCount2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(address) {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", (0, _utils.promisify)(this._web3Service._web3.eth.getTransactionCount)(address, 'pending'));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _getTxCount(_x) {
        return _getTxCount2.apply(this, arguments);
      }

      return _getTxCount;
    }()
  }, {
    key: "_compareNonceCounts",
    value: function _compareNonceCounts(txCount, address) {
      if (txCount > this._counts[address]) {
        return txCount;
      } else {
        return this._counts[address];
      }
    }
  }, {
    key: "_removeDuplicateAddresses",
    value: function _removeDuplicateAddresses(accounts) {
      var uniqueAddresses = [];
      accounts.map(function (account) {
        if (!uniqueAddresses.includes(account.address)) uniqueAddresses.push(account.address);
      });
      return uniqueAddresses;
    }
  }, {
    key: "setCounts",
    value: function () {
      var _setCounts = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
        var _this2 = this;

        var accountsList, uniqueAddresses;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this._accountsService.listAccounts();

              case 2:
                accountsList = _context4.sent;

                if (!(accountsList.length === 0)) {
                  _context4.next = 5;
                  break;
                }

                return _context4.abrupt("return");

              case 5:
                uniqueAddresses = this._removeDuplicateAddresses(accountsList);
                return _context4.abrupt("return", new Promise(function (resolve) {
                  accountsList.map( /*#__PURE__*/function () {
                    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(account) {
                      var txCount;
                      return _regenerator["default"].wrap(function _callee3$(_context3) {
                        while (1) {
                          switch (_context3.prev = _context3.next) {
                            case 0:
                              _context3.next = 2;
                              return _this2._getTxCount(account.address);

                            case 2:
                              txCount = _context3.sent;
                              _this2._counts[account.address] = txCount;

                              if (Object.keys(_this2._counts).length === uniqueAddresses.length) {
                                resolve();
                              }

                            case 5:
                            case "end":
                              return _context3.stop();
                          }
                        }
                      }, _callee3);
                    }));

                    return function (_x2) {
                      return _ref.apply(this, arguments);
                    };
                  }());
                }));

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function setCounts() {
        return _setCounts.apply(this, arguments);
      }

      return setCounts;
    }()
  }, {
    key: "getNonce",
    value: function () {
      var _getNonce = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5() {
        var address, txCount, nonce;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                address = this._web3Service.currentAddress();
                _context5.next = 3;
                return this._getTxCount(address);

              case 3:
                txCount = _context5.sent;

                if (this._counts[address]) {
                  nonce = this._compareNonceCounts(txCount, address);
                  this._counts[address] += 1;
                } else {
                  this._counts[address] = txCount;
                  nonce = txCount;
                  this._counts[address] += 1;
                }

                return _context5.abrupt("return", nonce);

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getNonce() {
        return _getNonce.apply(this, arguments);
      }

      return getNonce;
    }()
  }]);
  return NonceService;
}(_servicesCore.PublicService);

exports["default"] = NonceService;