"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _servicesCore = require("@makerdao/services-core");

var _contracts = _interopRequireDefault(require("../../contracts/contracts"));

var _tokens = _interopRequireDefault(require("../../contracts/tokens"));

var _networks = _interopRequireWildcard(require("../../contracts/networks"));

var _ethers = require("ethers");

var _wrapContract = require("./smartContract/wrapContract");

var _mapValues = _interopRequireDefault(require("lodash/mapValues"));

var _assert = _interopRequireDefault(require("assert"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var SmartContractService = /*#__PURE__*/function (_PrivateService) {
  (0, _inherits2["default"])(SmartContractService, _PrivateService);

  var _super = _createSuper(SmartContractService);

  function SmartContractService() {
    var _this;

    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'smartContract';
    (0, _classCallCheck2["default"])(this, SmartContractService);
    _this = _super.call(this, name, ['web3', 'transactionManager']); // aliases

    _this.getContractByName = _this.getContract;
    _this.getContractAddressByName = _this.getContractAddress;
    return _this;
  }

  (0, _createClass2["default"])(SmartContractService, [{
    key: "initialize",
    value: function initialize() {
      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (settings.addContracts) {
        this._addedContracts = Object.keys(settings.addContracts).reduce(function (acc, key) {
          var def = settings.addContracts[key];
          acc[key] = [_objectSpread(_objectSpread({}, def), {}, {
            version: 1
          })];
          return acc;
        }, {});
      }

      this._addressOverrides = settings.addressOverrides || {};
      this.get('transactionManager').get('proxy').setSmartContractService(this);
    }
  }, {
    key: "getContractByAddressAndAbi",
    value: function getContractByAddressAndAbi(address, abi) {
      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          name = _ref.name,
          _ref$wrap = _ref.wrap,
          wrap = _ref$wrap === void 0 ? true : _ref$wrap;

      (0, _assert["default"])(address, "Missing address for contract \"".concat(name, "\""));
      if (!name) name = this.lookupContractName(address);
      var web3Service = this.get('web3');
      var signerOrProvider = web3Service.get('accounts').hasAccount() ? web3Service.getEthersSigner() : web3Service.getEthersSigner().provider;
      var contract = new _ethers.Contract(address, abi, signerOrProvider);
      var txManager = wrap && this.get('transactionManager');
      return (0, _wrapContract.wrapContract)(contract, name, abi, txManager);
    }
  }, {
    key: "getContractAddress",
    value: function getContractAddress(name) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          version = _ref2.version;

      var _this$_getContractInf = this._getContractInfo(name, version),
          address = _this$_getContractInf.address;

      return address;
    }
  }, {
    key: "getContractAddresses",
    value: function getContractAddresses() {
      return (0, _mapValues["default"])(this._getAllContractInfo(), function (versions) {
        return findLatestContractInfo(versions).address;
      });
    }
  }, {
    key: "getContract",
    value: function getContract(name) {
      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          version = _ref3.version,
          _ref3$wrap = _ref3.wrap,
          wrap = _ref3$wrap === void 0 ? true : _ref3$wrap;

      var info = this._getContractInfo(name, version);

      return this.getContractByAddressAndAbi(info.address, info.abi, {
        name: name,
        wrap: wrap
      });
    }
  }, {
    key: "lookupContractName",
    value: function lookupContractName(address) {
      address = address.toUpperCase();

      var contracts = this._getAllContractInfo();

      for (var _i = 0, _Object$keys = Object.keys(contracts); _i < _Object$keys.length; _i++) {
        var name = _Object$keys[_i];
        var versions = contracts[name];

        if (versions.find(function (info) {
          return info.address && info.address.toUpperCase() === address;
        })) {
          return name;
        }
      }

      return null;
    }
  }, {
    key: "hasContract",
    value: function hasContract(name) {
      return Object.keys(_contracts["default"]).indexOf(name) > -1 || Object.keys(_tokens["default"]).indexOf(name) > -1 || Object.keys(this._addedContracts || {}).indexOf(name) > -1;
    } // generally we should be using the ethers contract interface. this is only
    // for edge cases that the ethers contract interface doesn't support, like
    // calling (but not sending) a non-constant function

  }, {
    key: "getWeb3ContractByName",
    value: function getWeb3ContractByName(name) {
      var _this$_getContractInf2 = this._getContractInfo(name),
          abi = _this$_getContractInf2.abi,
          address = _this$_getContractInf2.address;

      return this.get('web3').web3Contract(abi, address);
    }
  }, {
    key: "_getContractInfo",
    value: function _getContractInfo(name, version) {
      (0, _assert["default"])(this.hasContract(name), "No contract found for \"".concat(name, "\""));

      var contracts = this._getAllContractInfo();

      var contractInfo = findContractInfoForVersion(contracts[name], version);
      (0, _assert["default"])(contractInfo, "Cannot find contract ".concat(name, ", version ").concat(version));
      (0, _assert["default"])(contractInfo.address, "Contract ".concat(name, " has no address"));
      return contractInfo;
    }
  }, {
    key: "_getAllContractInfo",
    value: function _getAllContractInfo() {
      var _this2 = this;

      var _this$get = this.get('web3'),
          networkName = _this$get.networkName;

      var mapping = _networks["default"].find(function (m) {
        return m.name === networkName;
      });

      (0, _assert["default"])(mapping, "Network \"".concat(networkName, "\" not found in mapping."));
      if (!mapping.contracts) mapping.contracts = (0, _networks.contractAddressesInfo)(this._addressOverrides);
      if (!this._contractInfoCache) this._contractInfoCache = {};

      if (!this._contractInfoCache[networkName]) {
        var allContractInfo = this._addedContracts ? _objectSpread(_objectSpread({}, mapping.contracts), this._addedContracts) : mapping.contracts;
        this._contractInfoCache[networkName] = (0, _mapValues["default"])(allContractInfo, function (versions, name) {
          var latest = findLatestContractInfo(versions);
          var address = getSingleAddress(_this2._addressOverrides[name], networkName) || getSingleAddress(latest.address, networkName);
          return address !== latest.address ? versions.map(function (v) {
            return v === latest ? _objectSpread(_objectSpread({}, latest), {}, {
              address: address
            }) : v;
          }) : versions;
        });
      }

      return this._contractInfoCache[networkName];
    }
  }]);
  return SmartContractService;
}(_servicesCore.PrivateService);

exports["default"] = SmartContractService;

function findContractInfoForVersion(versions, version) {
  if (!version) version = Math.max.apply(Math, (0, _toConsumableArray2["default"])(versions.map(function (info) {
    return info.version;
  })));
  return versions.find(function (info) {
    return info.version === version;
  });
}

function findLatestContractInfo(versions) {
  return findContractInfoForVersion(versions);
}

function getSingleAddress(addressGroup, networkName) {
  if (!addressGroup) return;
  if (typeof addressGroup === 'string') return addressGroup;
  if (addressGroup[networkName]) return addressGroup[networkName]; // some configuration uses 'testnet' instead of 'test' as the network name

  if (networkName.startsWith('test') && addressGroup.testnet) return addressGroup.testnet; // return nothing if addressGroup has no address defined for this network
}