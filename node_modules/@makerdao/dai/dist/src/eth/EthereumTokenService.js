"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _servicesCore = require("@makerdao/services-core");

var _tokens = _interopRequireDefault(require("../../contracts/tokens"));

var _contracts = _interopRequireDefault(require("../../contracts/contracts"));

var _networks = _interopRequireDefault(require("../../contracts/networks"));

var _Erc20Token = _interopRequireDefault(require("./tokens/Erc20Token"));

var _EtherToken = _interopRequireDefault(require("./tokens/EtherToken"));

var _WethToken = _interopRequireDefault(require("./tokens/WethToken"));

var _PethToken = _interopRequireDefault(require("./tokens/PethToken"));

var _ERC = _interopRequireDefault(require("../../contracts/abis/ERC20.json"));

var _assert = _interopRequireDefault(require("assert"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var EthereumTokenService = /*#__PURE__*/function (_PrivateService) {
  (0, _inherits2["default"])(EthereumTokenService, _PrivateService);

  var _super = _createSuper(EthereumTokenService);

  function EthereumTokenService() {
    var _this;

    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'token';
    (0, _classCallCheck2["default"])(this, EthereumTokenService);
    _this = _super.call(this, name, ['smartContract', 'web3', 'gas', 'transactionManager']);
    _this._tokens = _tokens["default"];
    _this._addedTokens = {};
    return _this;
  }

  (0, _createClass2["default"])(EthereumTokenService, [{
    key: "initialize",
    value: function initialize() {
      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (settings.erc20) {
        var _iterator = _createForOfIteratorHelper(settings.erc20),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var token = _step.value;
            var symbol = token.symbol || token.currency.symbol;
            this._tokens[symbol] = symbol;
            this._addedTokens[symbol] = [token];
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      this._addressOverrides = settings.addressOverrides || {};
    }
  }, {
    key: "getTokens",
    value: function getTokens() {
      return Object.keys(this._tokens);
    } // FIXME should be caching/memoizing here

  }, {
    key: "getToken",
    value: function getToken(symbol, version) {
      // support passing in Currency constructors
      if (symbol.symbol) symbol = symbol.symbol;
      (0, _assert["default"])(symbol, 'Symbol is blank');
      (0, _assert["default"])(this.getTokens().indexOf(symbol) >= 0, "Symbol \"".concat(symbol, "\" is not recognized"));

      if (symbol === _tokens["default"].ETH) {
        return new _EtherToken["default"](this.get('web3'), this.get('gas'), this.get('transactionManager'));
      }

      var _this$_getTokenInfo = this._getTokenInfo(symbol, version),
          address = _this$_getTokenInfo.address,
          decimals = _this$_getTokenInfo.decimals,
          abi = _this$_getTokenInfo.abi,
          currency = _this$_getTokenInfo.currency;

      var scs = this.get('smartContract');
      var contract = scs.getContractByAddressAndAbi(address, abi || _ERC["default"]);

      if (symbol === _tokens["default"].WETH) {
        return new _WethToken["default"](contract, this.get('web3'), decimals);
      }

      if (symbol === _tokens["default"].PETH) {
        if (decimals !== 18) {
          throw new Error('PethToken code hardcodes 18 decimal places.');
        }

        var tub = scs.getContract(_contracts["default"].SAI_TUB);
        return new _PethToken["default"](contract, this.get('web3'), tub);
      }

      return new _Erc20Token["default"](contract, this.get('web3'), decimals || 18, symbol, currency);
    }
  }, {
    key: "_getTokenInfo",
    value: function _getTokenInfo(symbol, version) {
      var _this$get = this.get('web3'),
          network = _this$get.network,
          networkName = _this$get.networkName;

      var tokenInfoList = this._addedTokens[symbol] || this._getNetworkMapping(network)[symbol];

      (0, _assert["default"])(tokenInfoList, "Cannot find token info for \"".concat(symbol, "\""));
      var tokenInfo = version ? tokenInfoList[version - 1] : tokenInfoList[tokenInfoList.length - 1];
      if (this._addressOverrides[symbol]) tokenInfo.address = this._addressOverrides[symbol];
      if (typeof tokenInfo.address === 'string') return tokenInfo;
      return _objectSpread(_objectSpread({}, tokenInfo), {}, {
        address: tokenInfo.address[networkName === 'test' ? 'testnet' : networkName]
      });
    }
  }, {
    key: "_getNetworkMapping",
    value: function _getNetworkMapping(networkId) {
      var mapping = _networks["default"].filter(function (m) {
        return m.networkId === networkId;
      });

      if (mapping.length < 1) {
        throw new Error('networkId not found');
      }

      return mapping[0].contracts;
    }
  }, {
    key: "_selectTokenVersions",
    value: function _selectTokenVersions(mapping) {
      var tokenArray = [];

      for (var token in _tokens["default"]) {
        if (token === 'ETH') {
          tokenArray['ETH'] = [1];
        }

        if (token in mapping) {
          (function () {
            var versionArray = [];
            mapping[token].forEach(function (e) {
              versionArray.push(e.version);
            });
            tokenArray[token] = versionArray;
          })();
        }
      }

      return tokenArray;
    }
  }]);
  return EthereumTokenService;
}(_servicesCore.PrivateService);

exports["default"] = EthereumTokenService;