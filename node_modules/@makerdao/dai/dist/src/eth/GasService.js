"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.API_URL = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _servicesCore = require("@makerdao/services-core");

var _map = _interopRequireDefault(require("lodash/map"));

var _isomorphicFetch = _interopRequireDefault(require("isomorphic-fetch"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var API_URL = 'https://ethgasstation.info/json/ethgasAPI.json?api-key=';
exports.API_URL = API_URL;

var GasService = /*#__PURE__*/function (_PublicService) {
  (0, _inherits2["default"])(GasService, _PublicService);

  var _super = _createSuper(GasService);

  function GasService() {
    var _this;

    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'gas';
    (0, _classCallCheck2["default"])(this, GasService);
    _this = _super.call(this, name, ['web3']);
    _this._fallback = 4000000;
    _this._multiplier = 1.55;
    _this._transactionSpeed = 'fast';
    return _this;
  }

  (0, _createClass2["default"])(GasService, [{
    key: "initialize",
    value: function initialize(settings) {
      if (settings) {
        this._parseConfig(settings.limit, 'limit');

        this._parseConfig(settings.price, 'price');
      }

      this._settings = settings || {};
      this._gasStationDataPromise = this.disablePrice ? Promise.resolve({}) : this.fetchGasStationData();
    }
  }, {
    key: "_parseConfig",
    value: function _parseConfig() {
      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';
      var label = arguments.length > 1 ? arguments[1] : undefined;
      return settings === 'default' || (0, _typeof2["default"])(settings) === 'object' ? this._setProperties(settings, label) : this[label] = settings;
    }
  }, {
    key: "_setProperties",
    value: function _setProperties(settings, label) {
      var _this2 = this;

      if (settings === 'default') return;
      return (0, _map["default"])(settings, function (value, key) {
        if (key === 'disable') {
          _this2['disable' + label.charAt(0).toUpperCase() + label.slice(1)] = value;
        } else {
          _this2[key] = value;
        }
      });
    }
  }, {
    key: "fetchGasStationData",
    value: function () {
      var _fetchGasStationData = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var response;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return (0, _isomorphicFetch["default"])(API_URL + this._settings.apiKey);

              case 3:
                response = _context.sent;
                return _context.abrupt("return", response.json());

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](0);
                console.error('Error fetching gas data; disabling preset gas price', _context.t0);
                this.disablePrice = true;

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 7]]);
      }));

      function fetchGasStationData() {
        return _fetchGasStationData.apply(this, arguments);
      }

      return fetchGasStationData;
    }()
  }, {
    key: "getGasPrice",
    value: function () {
      var _getGasPrice = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(txSpeed) {
        var speedSetting, gasStationData, price;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!this.price) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return", this.price);

              case 2:
                speedSetting = txSpeed ? txSpeed : this.transactionSpeed;
                _context2.next = 5;
                return this._gasStationDataPromise;

              case 5:
                gasStationData = _context2.sent;
                price = this.get('web3')._web3.utils.toWei((gasStationData[speedSetting] / 10).toString(), 'gwei');
                return _context2.abrupt("return", price);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getGasPrice(_x) {
        return _getGasPrice.apply(this, arguments);
      }

      return getGasPrice;
    }()
  }, {
    key: "getWaitTime",
    value: function () {
      var _getWaitTime = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(txSpeed) {
        var speedSetting, gasStationData;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                speedSetting = txSpeed ? txSpeed : this.transactionSpeed;
                _context3.next = 3;
                return this._gasStationDataPromise;

              case 3:
                gasStationData = _context3.sent;
                return _context3.abrupt("return", gasStationData["".concat(speedSetting, "Wait")]);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getWaitTime(_x2) {
        return _getWaitTime.apply(this, arguments);
      }

      return getWaitTime;
    }()
  }, {
    key: "estimateGasLimit",
    value: function () {
      var _estimateGasLimit = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(transaction) {
        var web3Data, blockLimit, estimate;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!this.limit) {
                  _context4.next = 2;
                  break;
                }

                return _context4.abrupt("return", this.limit);

              case 2:
                if (!this.disableLimit) {
                  _context4.next = 4;
                  break;
                }

                return _context4.abrupt("return", this.fallback);

              case 4:
                web3Data = [];
                _context4.prev = 5;
                _context4.next = 8;
                return Promise.all([this.get('web3').getBlock('latest'), this.get('web3').estimateGas(transaction)]);

              case 8:
                web3Data = _context4.sent;
                _context4.next = 14;
                break;

              case 11:
                _context4.prev = 11;
                _context4.t0 = _context4["catch"](5);
                return _context4.abrupt("return", this.fallback);

              case 14:
                blockLimit = web3Data[0].gasLimit;
                estimate = web3Data[1];

                if (!(!this.multiplier && !this.absolute)) {
                  _context4.next = 20;
                  break;
                }

                return _context4.abrupt("return", Math.min(this.absolute, blockLimit));

              case 20:
                if (this.absolute) {
                  _context4.next = 24;
                  break;
                }

                return _context4.abrupt("return", Math.min(parseInt(estimate * this.multiplier), blockLimit));

              case 24:
                return _context4.abrupt("return", Math.min(parseInt(estimate * this.multiplier), this.absolute, blockLimit));

              case 25:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[5, 11]]);
      }));

      function estimateGasLimit(_x3) {
        return _estimateGasLimit.apply(this, arguments);
      }

      return estimateGasLimit;
    }()
  }, {
    key: "removeMultiplier",
    value: function removeMultiplier() {
      this._multiplier = null;
    }
  }, {
    key: "removeAbsolute",
    value: function removeAbsolute() {
      this._absolute = null;
    }
  }, {
    key: "removeFallback",
    value: function removeFallback() {
      this._fallback = null;
    }
  }, {
    key: "multiplier",
    get: function get() {
      return this._multiplier;
    },
    set: function set(number) {
      if (number <= 0) {
        throw new Error('Gas limit multiplier must be greater than 0');
      }

      this._multiplier = number;
    }
  }, {
    key: "absolute",
    get: function get() {
      return this._absolute;
    },
    set: function set(number) {
      if (number <= 0) {
        throw new Error('Absolute gas limit must be greater than 0');
      }

      this._absolute = number;
    }
  }, {
    key: "fallback",
    get: function get() {
      return this._fallback;
    },
    set: function set(number) {
      if (number <= 0) {
        throw new Error('Fallback gas limit must be greater than 0');
      }

      this._fallback = number;
    }
  }, {
    key: "transactionSpeed",
    get: function get() {
      return this._transactionSpeed;
    },
    set: function set(speed) {
      var validKeys = ['average', 'fast', 'fastest', 'safeLow'];

      if (!validKeys.includes(speed)) {
        throw new Error("Invalid transaction speed -- options are ".concat(validKeys));
      }

      this._transactionSpeed = speed;
    }
  }]);
  return GasService;
}(_servicesCore.PublicService);

exports["default"] = GasService;