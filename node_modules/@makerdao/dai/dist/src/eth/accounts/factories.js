"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.privateKeyAccountFactory = privateKeyAccountFactory;
exports.providerAccountFactory = providerAccountFactory;
exports.browserProviderAccountFactory = browserProviderAccountFactory;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _ethereumjsUtil = _interopRequireDefault(require("ethereumjs-util"));

var _wallet = _interopRequireDefault(require("web3-provider-engine/dist/es5/subproviders/wallet"));

var _setup = require("./setup");

var _assert = _interopRequireDefault(require("assert"));

function privateKeyAccountFactory(_ref) {
  var key = _ref.key;

  if (typeof key != 'string' || !key.match(/^(0x)?[0-9a-fA-F]{64}$/)) {
    throw new Error('Invalid private key format');
  }

  var _ref2 = key.startsWith('0x') ? [key, key.replace(/^0x/, '')] : ['0x' + key, key],
      _ref3 = (0, _slicedToArray2["default"])(_ref2, 2),
      keyWithPrefix = _ref3[0],
      keySansPrefix = _ref3[1];

  var address = '0x' + _ethereumjsUtil["default"].privateToAddress(keyWithPrefix).toString('hex');

  var keyBuffer = Buffer.from(keySansPrefix, 'hex');
  var subprovider = new _wallet["default"]({
    getAddressString: function getAddressString() {
      return address;
    },
    getPrivateKey: function getPrivateKey() {
      return keyBuffer;
    }
  }, {});
  return {
    subprovider: subprovider,
    address: address
  };
}

function getAccountAddress(_x) {
  return _getAccountAddress.apply(this, arguments);
}

function _getAccountAddress() {
  _getAccountAddress = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(subprovider) {
    var _ref5,
        _ref5$offset,
        offset,
        address,
        _args = arguments;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _ref5 = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, _ref5$offset = _ref5.offset, offset = _ref5$offset === void 0 ? 0 : _ref5$offset, address = _ref5.address;
            (0, _assert["default"])(!(offset && address), 'Cannot set both address and offset');
            return _context.abrupt("return", new Promise(function (resolve, reject) {
              return subprovider.handleRequest({
                method: 'eth_accounts',
                params: [],
                id: 1
              }, null, function (err, val) {
                if (err) return reject(err);

                if (address) {
                  var matchingAddress = val.find(function (a) {
                    return a.toLowerCase() === address.toLowerCase();
                  });
                  (0, _assert["default"])(matchingAddress, 'No matching address found in provider.');
                  resolve(matchingAddress.toLowerCase());
                } else {
                  resolve(typeof val[offset] === 'string' ? val[offset].toLowerCase() : val[offset]);
                }
              });
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getAccountAddress.apply(this, arguments);
}

function providerAccountFactory(_x2, _x3) {
  return _providerAccountFactory.apply(this, arguments);
}

function _providerAccountFactory() {
  _providerAccountFactory = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(_ref4, provider) {
    var offset, address, subprovider;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            offset = _ref4.offset, address = _ref4.address;
            // we need to be able to swap out this account while leaving the original
            // provider in place for other accounts, so the subprovider here has to be
            // a different instance. using Proxy is a simple way to accomplish this.
            subprovider = new Proxy(provider, {});
            _context2.t0 = subprovider;
            _context2.next = 5;
            return getAccountAddress(subprovider, {
              offset: offset,
              address: address
            });

          case 5:
            _context2.t1 = _context2.sent;
            return _context2.abrupt("return", {
              subprovider: _context2.t0,
              address: _context2.t1
            });

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _providerAccountFactory.apply(this, arguments);
}

function browserProviderAccountFactory() {
  return _browserProviderAccountFactory.apply(this, arguments);
}

function _browserProviderAccountFactory() {
  _browserProviderAccountFactory = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
    var subprovider;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (0, _setup.getBrowserProvider)();

          case 2:
            subprovider = _context3.sent;
            _context3.t0 = subprovider;
            _context3.next = 6;
            return getAccountAddress(subprovider);

          case 6:
            _context3.t1 = _context3.sent;
            return _context3.abrupt("return", {
              subprovider: _context3.t0,
              address: _context3.t1
            });

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _browserProviderAccountFactory.apply(this, arguments);
}