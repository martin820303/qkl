"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setupEngine = setupEngine;
exports.getBrowserProvider = getBrowserProvider;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _ProviderType = _interopRequireDefault(require("../web3/ProviderType"));

var _es = _interopRequireDefault(require("web3-provider-engine/dist/es5"));

var _websocket = _interopRequireDefault(require("web3-provider-engine/dist/es5/subproviders/websocket"));

var _rpc = _interopRequireDefault(require("web3-provider-engine/dist/es5/subproviders/rpc"));

var _subscriptions = _interopRequireDefault(require("web3-provider-engine/dist/es5/subproviders/subscriptions"));

var _provider = _interopRequireDefault(require("web3-provider-engine/dist/es5/subproviders/provider"));

var DEFAULT_POLLING_INTERVAL = 4000;

function setupEngine(_x) {
  return _setupEngine.apply(this, arguments);
}

function _setupEngine() {
  _setupEngine = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(settings) {
    var _settings$web, providerSettings, pollingInterval, engine, result, getHttpProvider, getWebsocketProvider, getInjectedProvider;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _settings$web = settings.web3, providerSettings = _settings$web.provider, pollingInterval = _settings$web.pollingInterval;
            engine = new _es["default"]({
              pollingInterval: pollingInterval || DEFAULT_POLLING_INTERVAL
            });
            result = {
              engine: engine
            };

            getHttpProvider = function getHttpProvider() {
              var rpcUrl = getRpcUrl(providerSettings);
              var subscriptionProvider = new _subscriptions["default"]();
              subscriptionProvider.on('data', function (err, data) {
                return engine.emit('data', err, data);
              });
              engine.addProvider(subscriptionProvider);
              return new _rpc["default"]({
                rpcUrl: rpcUrl
              });
            };

            getWebsocketProvider = function getWebsocketProvider() {
              var rpcUrl = getRpcUrl(providerSettings);
              var subscriptionProvider = new _subscriptions["default"]();
              subscriptionProvider.on('data', function (err, data) {
                return engine.emit('data', err, data);
              });
              engine.addProvider(subscriptionProvider);
              return new _websocket["default"]({
                rpcUrl: rpcUrl
              });
            };

            getInjectedProvider = function getInjectedProvider() {
              if (!providerSettings.inject) {
                throw new Error("'inject' must be supplied with ProviderType.INJECT");
              }

              return new _provider["default"](providerSettings.inject);
            };

            _context.t0 = providerSettings.type;
            _context.next = _context.t0 === _ProviderType["default"].BROWSER ? 9 : _context.t0 === _ProviderType["default"].WEBSOCKET ? 13 : _context.t0 === _ProviderType["default"].HTTP ? 15 : _context.t0 === _ProviderType["default"].INFURA ? 17 : _context.t0 === _ProviderType["default"].INJECT ? 19 : 21;
            break;

          case 9:
            _context.next = 11;
            return getBrowserProvider();

          case 11:
            result.provider = _context.sent;
            return _context.abrupt("break", 22);

          case 13:
            result.provider = getWebsocketProvider();
            return _context.abrupt("break", 22);

          case 15:
            result.provider = getHttpProvider();
            return _context.abrupt("break", 22);

          case 17:
            result.provider = providerSettings.protocol === 'wss' ? getWebsocketProvider() : getHttpProvider();
            return _context.abrupt("break", 22);

          case 19:
            result.provider = getInjectedProvider();
            return _context.abrupt("break", 22);

          case 21:
            throw new Error('provider type must be defined');

          case 22:
            engine.addProvider(result.provider);
            return _context.abrupt("return", result);

          case 24:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _setupEngine.apply(this, arguments);
}

function getBrowserProvider() {
  return _getBrowserProvider.apply(this, arguments);
}

function _getBrowserProvider() {
  _getBrowserProvider = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
    var wrap;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(typeof window === 'undefined')) {
              _context2.next = 2;
              break;
            }

            throw new Error('Cannot use ProviderType.BROWSER because window is undefined');

          case 2:
            wrap = function wrap(provider) {
              var subprovider = new _provider["default"](provider);
              subprovider.isWindowProvider = true;
              return subprovider;
            };

            if (!window.ethereum) {
              _context2.next = 9;
              break;
            }

            _context2.next = 6;
            return window.ethereum.enable();

          case 6:
            return _context2.abrupt("return", wrap(window.ethereum));

          case 9:
            if (!window.web3) {
              _context2.next = 11;
              break;
            }

            return _context2.abrupt("return", wrap(window.web3.currentProvider));

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getBrowserProvider.apply(this, arguments);
}

function getInfuraUrl() {
  var protocol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'https';
  var network = arguments.length > 1 ? arguments[1] : undefined;
  var infuraProjectId = arguments.length > 2 ? arguments[2] : undefined;

  if (!infuraProjectId) {
    throw new Error('Cannot use infura without a project ID');
  }

  var url = "".concat(protocol, "://").concat(network, ".infura.io");
  url += protocol === 'wss' ? '/ws' : '';
  url += "/v3/".concat(infuraProjectId);
  return url;
}

function getRpcUrl(providerSettings) {
  var network = providerSettings.network,
      protocol = providerSettings.protocol,
      infuraProjectId = providerSettings.infuraProjectId,
      type = providerSettings.type,
      url = providerSettings.url;

  switch (type) {
    case _ProviderType["default"].HTTP:
      return url;

    case _ProviderType["default"].WEBSOCKET:
      return url;

    case _ProviderType["default"].INFURA:
      return getInfuraUrl(protocol, network, infuraProjectId);

    default:
      throw new Error('Invalid web3 provider type: ' + type);
  }
}