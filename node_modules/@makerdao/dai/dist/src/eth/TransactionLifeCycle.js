"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _servicesCore = require("@makerdao/services-core");

var _TransactionState = _interopRequireDefault(require("../eth/TransactionState"));

var _TransactionTransitions = _interopRequireWildcard(require("./TransactionTransitions"));

var initialized = _TransactionState["default"].initialized,
    pending = _TransactionState["default"].pending,
    mined = _TransactionState["default"].mined,
    finalized = _TransactionState["default"].finalized,
    error = _TransactionState["default"].error;
var stateOrder = [initialized, pending, mined, finalized];

var TransactionLifeCycle = /*#__PURE__*/function () {
  function TransactionLifeCycle(businessObject) {
    (0, _classCallCheck2["default"])(this, TransactionLifeCycle);
    this._state = new _servicesCore.StateMachine(initialized, _TransactionTransitions.transactionTypeTransitions[_TransactionTransitions["default"].transaction]);
    this._businessObject = businessObject;
  }

  (0, _createClass2["default"])(TransactionLifeCycle, [{
    key: "setPending",
    value: function setPending() {
      this._state.transitionTo(pending);
    }
  }, {
    key: "setMined",
    value: function setMined() {
      this._state.transitionTo(mined);
    }
  }, {
    key: "setFinalized",
    value: function setFinalized() {
      this._state.transitionTo(finalized);
    }
  }, {
    key: "setError",
    value: function setError(errorObject) {
      this.error = errorObject;

      this._state.transitionTo(error);
    }
  }, {
    key: "state",
    value: function state() {
      return this._state.state();
    }
    /**
     * @returns {boolean}
     */

  }, {
    key: "isInitialized",
    value: function isInitialized() {
      return this._state.inState(initialized);
    }
    /**
     * @returns {boolean}
     */

  }, {
    key: "isPending",
    value: function isPending() {
      return this._state.inState(pending);
    }
    /**
     * @returns {boolean|null}
     */

  }, {
    key: "isMined",
    value: function isMined() {
      return this._state.inState(mined);
    }
    /**
     * @returns {boolean|null}
     */

  }, {
    key: "isFinalized",
    value: function isFinalized() {
      return this._state.inState(finalized);
    }
    /**
     * @returns {boolean}
     */

  }, {
    key: "isError",
    value: function isError() {
      return this._state.inState(error);
    }
  }, {
    key: "_returnValue",
    value: function _returnValue() {
      return this._businessObject || this;
    }
  }, {
    key: "inOrPastState",
    value: function inOrPastState(state) {
      var currentState = this.state();
      if (state === currentState) return true; // "error" is not part of the state order sequence, we can check it separately

      if (state === error) return this.isError();
      var currentIndex = stateOrder.indexOf(currentState);
      var targetIndex = stateOrder.indexOf(state);

      if (currentIndex === -1 || targetIndex === -1) {
        throw new Error('invalid state');
      }

      return currentIndex >= targetIndex;
    }
  }, {
    key: "_onStateChange",
    value: function _onStateChange(from, to, handler) {
      var _this = this;

      this._state.onStateChanged(function (oldState, newState) {
        if (oldState === from && newState === to) {
          handler(_this._returnValue());
        }
      });
    }
  }, {
    key: "onPending",
    value: function onPending(handler) {
      return this._onStateChange(initialized, pending, handler);
    }
  }, {
    key: "onMined",
    value: function onMined(handler) {
      return this._onStateChange(pending, mined, handler);
    }
  }, {
    key: "onFinalized",
    value: function onFinalized(handler) {
      return this._onStateChange(mined, finalized, handler);
    } // alias for onFinalized

  }, {
    key: "onConfirmed",
    value: function onConfirmed(handler) {
      return this.onFinalized(handler);
    }
  }, {
    key: "onError",
    value: function onError(handler) {
      var _this2 = this;

      this._state.onStateChanged(function (oldState, newState) {
        if (newState === error) {
          handler(_this2.error, _this2._returnValue());
        }
      });
    }
  }, {
    key: "on",
    value: function on(state, handler) {
      if (state === error) return this.onError(handler);

      if (!Object.keys(_TransactionState["default"]).includes(state)) {
        throw new Error("Unrecognized state \"".concat(state, "\""));
      }

      var prevState = stateOrder[stateOrder.indexOf(state) - 1];
      return this._onStateChange(prevState, state, handler);
    }
  }]);
  return TransactionLifeCycle;
}();

var _default = TransactionLifeCycle;
exports["default"] = _default;