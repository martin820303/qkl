"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));

var _tracksTransactions = _interopRequireDefault(require("../utils/tracksTransactions"));

var _servicesCore = require("@makerdao/services-core");

var _abis = require("../../contracts/abis");

var _ethers = require("ethers");

var _class;

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var DSProxyService = (_class = /*#__PURE__*/function (_PrivateService) {
  (0, _inherits2["default"])(DSProxyService, _PrivateService);

  var _super = _createSuper(DSProxyService);

  function DSProxyService() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'proxy';
    (0, _classCallCheck2["default"])(this, DSProxyService);
    return _super.call(this, name, ['web3']);
  }

  (0, _createClass2["default"])(DSProxyService, [{
    key: "authenticate",
    value: function () {
      var _authenticate = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.getProxyAddress();

              case 2:
                this._currentProxy = _context.sent;

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function authenticate() {
        return _authenticate.apply(this, arguments);
      }

      return authenticate;
    }() // workaround for a circular dependency:
    // smartContract -> transactionManager -> proxy -> smartContract

  }, {
    key: "setSmartContractService",
    value: function setSmartContractService(service) {
      this._smartContractService = service;
    }
  }, {
    key: "_proxyRegistry",
    value: function _proxyRegistry() {
      return this._smartContractService.getContract('PROXY_REGISTRY');
    }
  }, {
    key: "_resetDefaults",
    value: function _resetDefaults(newProxy) {
      this._currentProxy = newProxy;
      this._currentAddress = this.get('web3').currentAddress();
    } // this needs to be async so it can fetch the proxy address just-in-time after
    // an account switch. if we don't want this to be async, we have to make
    // maker.useAccount async and set up a hook so that this service can get the
    // new proxy address as soon as the switch happens

  }, {
    key: "currentProxy",
    value: function () {
      var _currentProxy = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this._currentAddress === this.get('web3').currentAddress() ? this._currentProxy : this.getProxyAddress());

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function currentProxy() {
        return _currentProxy.apply(this, arguments);
      }

      return currentProxy;
    }()
  }, {
    key: "ensureProxy",
    value: function () {
      var _ensureProxy = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(_ref) {
        var promise, proxy;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                promise = _ref.promise;
                _context3.next = 3;
                return this.currentProxy();

              case 3:
                proxy = _context3.sent;

                if (!proxy) {
                  _context3.next = 6;
                  break;
                }

                return _context3.abrupt("return", proxy);

              case 6:
                _context3.next = 8;
                return this.build({
                  promise: promise
                });

              case 8:
                return _context3.abrupt("return", this._currentProxy);

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function ensureProxy(_x) {
        return _ensureProxy.apply(this, arguments);
      }

      return ensureProxy;
    }()
  }, {
    key: "build",
    value: function () {
      var _build = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(_ref2) {
        var promise, proxy, txo;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                promise = _ref2.promise;
                _context4.next = 3;
                return this.currentProxy();

              case 3:
                proxy = _context4.sent;

                if (!proxy) {
                  _context4.next = 6;
                  break;
                }

                throw new Error('This account already has a proxy deployed at ' + proxy);

              case 6:
                _context4.next = 8;
                return this._proxyRegistry().build({
                  promise: promise
                });

              case 8:
                txo = _context4.sent;
                this._currentProxy = txo.receipt.logs[0].address;
                return _context4.abrupt("return", txo);

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function build(_x2) {
        return _build.apply(this, arguments);
      }

      return build;
    }()
  }, {
    key: "execute",
    value: function execute(contract, method, args, options, address) {
      var _contract$interface$f;

      if (!address && typeof this._currentProxy !== 'string') {
        throw new Error('No proxy found for current account');
      }

      var proxyAddress = address ? address : this._currentProxy;
      var proxyContract = this.getUnwrappedProxyContract(proxyAddress);

      var data = (_contract$interface$f = contract["interface"].functions)[method].apply(_contract$interface$f, (0, _toConsumableArray2["default"])(args)).data;

      return proxyContract.execute(contract.address, data, options);
    }
  }, {
    key: "getProxyAddress",
    value: function () {
      var _getProxyAddress = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5() {
        var providedAddress,
            address,
            proxyAddress,
            _args5 = arguments;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                providedAddress = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : false;
                address = providedAddress ? providedAddress : this.get('web3').currentAddress();
                _context5.next = 4;
                return this._proxyRegistry().proxies(address);

              case 4:
                proxyAddress = _context5.sent;

                if (proxyAddress === '0x0000000000000000000000000000000000000000') {
                  proxyAddress = null;
                }

                if (!providedAddress) this._resetDefaults(proxyAddress);
                return _context5.abrupt("return", proxyAddress);

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getProxyAddress() {
        return _getProxyAddress.apply(this, arguments);
      }

      return getProxyAddress;
    }()
  }, {
    key: "getOwner",
    value: function () {
      var _getOwner = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(address) {
        var contract;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                contract = this._getWrappedProxyContract(address);
                return _context6.abrupt("return", contract.owner());

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getOwner(_x3) {
        return _getOwner.apply(this, arguments);
      }

      return getOwner;
    }()
  }, {
    key: "setOwner",
    value: function () {
      var _setOwner = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(newOwner) {
        var proxyAddress,
            contract,
            _args7 = arguments;
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                proxyAddress = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : this._currentProxy;
                contract = this._getWrappedProxyContract(proxyAddress);
                return _context7.abrupt("return", contract.setOwner(newOwner));

              case 3:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function setOwner(_x4) {
        return _setOwner.apply(this, arguments);
      }

      return setOwner;
    }()
  }, {
    key: "_getWrappedProxyContract",
    value: function _getWrappedProxyContract(address) {
      return this._smartContractService.getContractByAddressAndAbi(address, _abis.dappHub.dsProxy);
    }
  }, {
    key: "getUnwrappedProxyContract",
    value: function getUnwrappedProxyContract(address) {
      return new _ethers.Contract(address, _abis.dappHub.dsProxy, this.get('web3').getEthersSigner());
    }
  }]);
  return DSProxyService;
}(_servicesCore.PrivateService), ((0, _applyDecoratedDescriptor2["default"])(_class.prototype, "ensureProxy", [_tracksTransactions["default"]], Object.getOwnPropertyDescriptor(_class.prototype, "ensureProxy"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "build", [_tracksTransactions["default"]], Object.getOwnPropertyDescriptor(_class.prototype, "build"), _class.prototype)), _class);
exports["default"] = DSProxyService;