"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _servicesCore = require("@makerdao/services-core");

var _index = require("../index");

var _EventEmitter = _interopRequireDefault(require("./EventEmitter"));

var _debug = _interopRequireDefault(require("debug"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var log = (0, _debug["default"])('dai:EventService');

var EventService = /*#__PURE__*/function (_PrivateService) {
  (0, _inherits2["default"])(EventService, _PrivateService);

  var _super = _createSuper(EventService);

  /**
   * @param {string} name
   */
  function EventService() {
    var _this;

    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'event';
    (0, _classCallCheck2["default"])(this, EventService);
    _this = _super.call(this, name, []);
    _this._block = null; // all of our emitters â€“ we can have many of these
    // e.g. one for our maker object, a couple for some cdp objects, a few more on transaction objects, etc

    _this.emitters = {}; // this is our default emitter, it will likely be the maker object's personal emitter

    _this.buildEmitter({
      defaultEmitter: true
    });

    _this.ping = _this.ping.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  } // check all of our active polls for new state
  // this is currently called on every new block from Web3Service


  (0, _createClass2["default"])(EventService, [{
    key: "ping",
    value: function ping(block) {
      Object.values(this.emitters).forEach(function (emitter) {
        return emitter.ping(block);
      });
    } // add a event listener to an emitter

  }, {
    key: "on",
    value: function on(event, listener) {
      var emitter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._defaultEmitter();
      emitter.on(event, listener);
    } // push an event through an emitter

  }, {
    key: "emit",
    value: function emit(event, payload, block) {
      var emitter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this._defaultEmitter();
      emitter.emit(event, payload, block);
    } // remove a listener from an emitter

  }, {
    key: "removeListener",
    value: function removeListener(event, listener) {
      var emitter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._defaultEmitter();
      emitter.removeListener(event, listener);
    }
  }, {
    key: "registerPollEvents",
    value: function registerPollEvents(eventPayloadMap) {
      var emitter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._defaultEmitter();
      return emitter.registerPollEvents(eventPayloadMap);
    }
  }, {
    key: "buildEmitter",
    value: function buildEmitter() {
      var _this2 = this;

      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$defaultEmitter = _ref.defaultEmitter,
          defaultEmitter = _ref$defaultEmitter === void 0 ? false : _ref$defaultEmitter;

      var id = defaultEmitter ? 'default' : (0, _index.slug)();

      var disposeEmitter = this._disposeEmitter.bind(this, id);

      var newEmitter = new _EventEmitter["default"](disposeEmitter);
      newEmitter.on('error', function (eventObj) {
        return _this2._logError(id, eventObj.payload);
      });
      this.emitters[id] = newEmitter;
      return newEmitter;
    }
  }, {
    key: "_disposeEmitter",
    value: function _disposeEmitter(id) {
      if (id === 'default') {
        this._logError(id, 'cannot dispose default emitter');
      } else delete this.emitters[id];
    }
  }, {
    key: "_defaultEmitter",
    value: function _defaultEmitter() {
      return this.emitters["default"];
    }
  }, {
    key: "_logError",
    value: function _logError(name, msg) {
      log("Problem encountered in emitter ".concat(name, " -> ").concat(msg));
    }
  }]);
  return EventService;
}(_servicesCore.PrivateService);

exports["default"] = EventService;