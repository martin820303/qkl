"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _helpers = require("./helpers");

var _eventemitter = _interopRequireDefault(require("eventemitter2"));

var EventEmitter2 = _eventemitter["default"].EventEmitter2;

var EventEmitter = /*#__PURE__*/function () {
  function EventEmitter(disposeSelf) {
    (0, _classCallCheck2["default"])(this, EventEmitter);
    this._emitter = new EventEmitter2({
      wildcard: true,
      delimiter: '/'
    });
    this._polls = [];
    this._block = null;
    this._sequenceNum = 1;
    this._disposeSelf = disposeSelf;
    this.emit = this.emit.bind(this);
  }

  (0, _createClass2["default"])(EventEmitter, [{
    key: "emit",
    value: function emit(event) {
      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var block = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._getBlock();
      // if nobody's listening for this event, don't actually emit it
      if (this._emitter.listeners(event).length === 0) return;
      var eventObj = {
        payload: payload,
        block: block,
        type: event,
        sequence: this._sequenceNum
      };
      this._sequenceNum++;

      this._emitter.emit(event, eventObj);
    }
  }, {
    key: "on",
    value: function on(event, listener) {
      var _this = this;

      this._emitter.on(event, listener); // start polling for state changes if the associated event now has a listener


      this._polls.forEach(function (poll) {
        return _this._emitter.listeners(poll.type()).length > 0 && poll.heat();
      });
    }
  }, {
    key: "removeListener",
    value: function removeListener(event, listener) {
      var _this2 = this;

      this._emitter.removeListener(event, listener); // stop polling for state changes if the associated event no longer has a listener


      this._polls.forEach(function (poll) {
        return _this2._emitter.listeners(poll.type()).length === 0 && poll.cool();
      });
    }
  }, {
    key: "registerPollEvents",
    value: function registerPollEvents(eventPayloadMap) {
      for (var _i = 0, _Object$entries = Object.entries(eventPayloadMap); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = (0, _slicedToArray2["default"])(_Object$entries[_i], 2),
            eventType = _Object$entries$_i[0],
            payloadGetterMap = _Object$entries$_i[1];

        var payloadFetcher = (0, _helpers.createPayloadFetcher)(payloadGetterMap);
        var memoizedPoll = (0, _helpers.createMemoizedPoll)({
          type: eventType,
          emit: this.emit,
          getState: payloadFetcher
        });

        this._polls.push(memoizedPoll);
      }

      return this;
    }
  }, {
    key: "ping",
    value: function ping(block) {
      this._setBlock(block);

      this._polls.forEach(function (poll) {
        return poll.ping();
      });
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this.emit = function () {};

      this.on = function () {};

      this._disposeSelf();
    }
  }, {
    key: "_setBlock",
    value: function _setBlock(block) {
      if (block !== undefined) this._block = block;
    }
  }, {
    key: "_getBlock",
    value: function _getBlock() {
      return this._block;
    } // For testing

  }, {
    key: "_startPolls",
    value: function _startPolls() {
      this._polls.forEach(function (poll) {
        return poll.heat();
      });
    }
  }, {
    key: "_stopPolls",
    value: function _stopPolls() {
      this._polls.forEach(function (poll) {
        return poll.cool();
      });
    }
  }]);
  return EventEmitter;
}();

exports["default"] = EventEmitter;