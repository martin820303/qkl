"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _servicesCore = require("@makerdao/services-core");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var CacheService = /*#__PURE__*/function (_LocalService) {
  (0, _inherits2["default"])(CacheService, _LocalService);

  var _super = _createSuper(CacheService);

  function CacheService() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'cache';
    (0, _classCallCheck2["default"])(this, CacheService);
    return _super.call(this, name);
  }

  (0, _createClass2["default"])(CacheService, [{
    key: "initialize",
    value: function initialize() {
      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (settings.storage) {
        this._storage = settings.storage;
      }
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return !!this._storage;
    }
  }, {
    key: "has",
    value: function has(key) {
      return !!this._storage && key in this._storage;
    }
  }, {
    key: "fetch",
    value: function fetch(key) {
      return this._storage ? this._storage[key] : undefined;
    }
  }, {
    key: "store",
    value: function store(key, value) {
      if (this._storage) this._storage[key] = value;
    }
  }]);
  return CacheService;
}(_servicesCore.LocalService);

exports["default"] = CacheService;