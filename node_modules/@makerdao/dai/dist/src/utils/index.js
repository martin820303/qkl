"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.captureConsole = captureConsole;
exports.promisify = promisify;
exports.getNetworkName = getNetworkName;
exports.slug = slug;
exports.promiseWait = promiseWait;
exports.uniqueId = void 0;

var _networks = _interopRequireDefault(require("../../contracts/networks"));

function captureConsole(cb) {
  // eslint-disable-next-line
  var origConsoleLog = console.log,
      output = []; // eslint-disable-next-line

  console.log = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return args.forEach(function (a) {
      return output.push(a);
    });
  };

  cb(); // eslint-disable-next-line

  console.log = origConsoleLog;
}

function promisify(fn) {
  return function () {
    var _this = this;

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return new Promise(function (resolve, reject) {
      fn.apply(_this, args.concat(function (err, value) {
        return err ? reject(err) : resolve(value);
      }));
    });
  };
}

function getNetworkName(networkId) {
  var result = _networks["default"].filter(function (n) {
    return n.networkId === networkId;
  });

  if (result.length < 1) {
    throw new Error('No network with ID ' + networkId + ' found.');
  }

  return result[0].name;
}

function slug() {
  return '-' + Math.random().toString(36).substring(2, 7) + Math.random().toString(36).substring(2, 7);
}

function promiseWait(ms) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, ms);
  });
} // https://stackoverflow.com/a/43963612/56817


var uniqueId = function () {
  var currentId = 0;
  var map = new WeakMap();
  return function (object) {
    if (!map.has(object)) {
      map.set(object, ++currentId);
    }

    return map.get(object);
  };
}();

exports.uniqueId = uniqueId;