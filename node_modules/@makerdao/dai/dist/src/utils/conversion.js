"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.numberToBytes32 = numberToBytes32;
exports.bytes32ToNumber = bytes32ToNumber;
exports.stringToBytes32 = stringToBytes32;
exports.stringToBytes = stringToBytes;
exports.bytesToString = bytesToString;
exports.padRight = padRight;
exports.toHex = toHex;
exports.fromWei = fromWei;
exports.fromRay = fromRay;
exports.fromRad = fromRad;

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _ethers = require("ethers");

var _assert = _interopRequireDefault(require("assert"));

function numberToBytes32(num) {
  var bn = _ethers.utils.bigNumberify(num);

  return _ethers.utils.hexlify(_ethers.utils.padZeros(bn, 32));
}

function bytes32ToNumber(bytes32) {
  return _ethers.utils.bigNumberify(bytes32).toNumber();
}

function stringToBytes32(text) {
  var pad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  var data = _ethers.utils.toUtf8Bytes(text);

  if (data.length > 32) {
    throw new Error('too long');
  }

  if (pad) data = _ethers.utils.padZeros(data, 32);
  return _ethers.utils.hexlify(data);
}

function stringToBytes(str) {
  (0, _assert["default"])(!!str, 'argument is falsy');
  (0, _assert["default"])(typeof str === 'string', 'argument is not a string');
  return '0x' + Buffer.from(str).toString('hex');
}

function bytesToString(hex) {
  return Buffer.from(hex.replace(/^0x/, ''), 'hex').toString().replace(/\x00/g, ''); // eslint-disable-line no-control-regex
}

function padRight(string, chars, sign) {
  return string + new Array(chars - string.length + 1).join(sign ? sign : '0');
}

function toHex(str) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$with0x = _ref.with0x,
      with0x = _ref$with0x === void 0 ? true : _ref$with0x,
      _ref$rightPadding = _ref.rightPadding,
      rightPadding = _ref$rightPadding === void 0 ? 64 : _ref$rightPadding;

  var result = '';

  for (var i = 0; i < str.length; i++) {
    result += str.charCodeAt(i).toString(16);
  }

  if (rightPadding > 0) result = padRight(result, rightPadding);
  return with0x ? '0x' + result : result;
}

function fromWei(value) {
  return (0, _bignumber["default"])(value).shiftedBy(-18);
}

function fromRay(value) {
  return (0, _bignumber["default"])(value).shiftedBy(-27);
}

function fromRad(value) {
  return (0, _bignumber["default"])(value).shiftedBy(-45);
}